package SixteenS::Statistics::AlphaDiversity;
use strict;
require Exporter;
our @ISA = qw(Exporter);
our @EXPORT = qw(rank_abundance rarefaction_groups box_rarefaction anova_posthoc tsc_mothurbatch generate_raretable generate_alphaindex rare_normalized);

use SixteenS::Tools::OtuFormatTransfer;##tran_tsc2mothur
#--------------------------------------------------------
#Alpha-diversity indices were generated by these function
#--------------------------------------------------------
sub rarefaction_groups{
##this function is used to plot rarefaction curves
##we plot different groups with certain color
##Two arguements 1. rarefaction table 2. groups table
    my @tm = @_;
    die "$! \n" unless open(II,"$tm[1]");
    <II>;
    my $number = <II>;
    chomp($number);
    my @num = split(/\s+/, $number);
    $number = $#num + 1;


    my $i = 1;
    my $ins = 255/$number;

    while($i < $number)
    {
##For every catergorie samples
        die "$! \n" unless open(II,"$tm[1]");
        my %direct;
        while(<II>)
        {
            chomp;
            next if(/^#/);
            my @tem = split /\s+/;
            $direct{$tem[$i]}{$tem[0]} = 1;
        }
        close II;

##generate R script
        my $Rout = "$tm[0].Rout";
        my $rareout = "$tm[0].rarefaction.$i.pdf";

        die "$! $Rout\n" unless open(TEM,">$Rout");
        print TEM  "pdf(\"$rareout\");\n matr <- read.table(file=\"$tm[0]\",sep=\"\\t\",header=T);\n maxd <- 1; \n for(j in 2:dim(matr)[2]){ \ntem <- matr[,j] \ntem <- tem[!is.na(tem)]; if(maxd < max(tem)){ maxd <- max(tem)} \n }  \n y <- matr[,2]; y <- y[!is.na(y)]; x <- matr[,1]; x <- x[1:length(y)]; \nplot(x,y,type='l',col='white',ylim=c(0,maxd),xlim=c(0,max(matr[,1])), xlab=\"Number of Sequences\", ylab=\"Number of OTUS\",main=\"Rarefaction Curves For Groups\")\n";

        my $cate = 1;
        my @ts = ();
        for my $key (sort keys %direct)
        {
            my @tm =();
            for my $k(sort keys %{$direct{$key}})
            {
                push @tm, "\"$k\"";
            }
            my $t = join(",",@tm);
            my $cates = $cate * 10;

            push @ts, "\"$key\"";
           # print $t;
            print TEM "selectmatr <- matr[c($t)]\n";
            my $str = <<STD ;
            coln <- dim(selectmatr)[2]
#cl <- rgb($cates, (0:(coln-1))/coln,$ins*$i,max=255)
                for(i in 1:coln){ 
                    y <- selectmatr[,i] 
                        y <- y[!is.na(y)]
                        x <- matr[,1]
                        x <- x[1:length(y)]
                        points(x,y, col=palette()[$cate],type='l') 
                }
STD
                print TEM $str;
            $cate++;
        }

        my $legtxt = join(",",@ts);
        print TEM "\nlegend(\"topleft\",c($legtxt),pch=16, col=c(palette()[1:$cate]),title=\"Sample Group\")\ndev.off()";

        close TEM;
        `R CMD BATCH --args $Rout`;

        %direct = ();
        $i++;
    }
}##rarefaction_groups

sub box_rarefaction{
#This function plot boxplot of rarefaction 
#It is better to normanized sequences number to a certain cut
    my @tm = @_;
    die "$! \n" unless open(II,"$tm[1]");
    <II>;
    my $number = <II>;
    chomp($number);
    my @num = split(/\s+/, $number);
    $number = $#num + 1;

    my $i = 1;
    my $ins = 255/$number;

    while($i < $number)
    {
##For every catergorie samples
        die "$! \n" unless open(II,"$tm[1]");
        my %direct;
        while(<II>)
        {
            chomp;
            next if(/^#/);
            my @tem = split /\s+/;
            $direct{$tem[$i]}{$tem[0]} = 1;
        }
        close II;

##generate R script
        my $Rout = "$tm[0].box.rarefaction.$i.R";
        my $rareout = "$tm[0].box.rarefaction.$i.pdf";

        die "$! $Rout\n" unless open(TEM,">$Rout");
        print TEM  <<RSP;
pdf(\"$rareout\")
matr <- read.table(file=\"$tm[0]\",sep=\"\\t\",header=T)
maxd <- 1
for(j in 2:dim(matr)[2])
{ 
    tem <- matr[,j]
        tem <- tem[!is.na(tem)]
        if(maxd < max(tem))
        {
            maxd <- max(tem)
        }
}
y <- matr[,2]
y <- y[!is.na(y)]
x <- matr[,1]
x <- x[1:length(y)]
#plot(x,y,ann=F,ylim=c(0,maxd),xlim=c(0,max(matr[,1])), xlab=\"Number of Sequences\", ylab=\"Number of OTUS\",main=\"Boxplot Rarefaction Curves For Groups\")

RSP
        my $cate = 1;
        my @ts = ();
        for my $key (sort keys %direct)
        {
            my @tm ;
            for my $k(sort keys %{$direct{$key}})
            {
                push @tm, "\"$k\"";
            }
            my $t = join(",",@tm);
            my $cates = $cate * 10;

            push @ts, "\"$key\"";
            print TEM "selectmatr <- matr[c($t)]\n";
            my $str = <<STD;
coln <- dim(selectmatr)[2]
fac <- c() 
grp <- c()
#cl <- rgb($cates, (0:(coln-1))/coln,$ins*$i,max=255)
for(i in 1:coln){ 
y <- selectmatr[,i] 
y <- y[!is.na(y)]
x <- matr[,1]
x <- x[1:length(y)]
#points(x,y, col=palette()[$cate],type='l') 
fac <- c(fac,x)
grp <- c(grp,y)
}
if($cate == 1){
boxplot(grp~fac,col=palette()[$cate],boxwex=0.4,xlab=\"Number of Sequences\", ylab=\"Number of OTUS\",main=\"Boxplot Rarefaction Curves For Groups\")
}else
{
    boxplot(grp~fac,col=palette()[$cate],add=TRUE,boxwex=0.4)
}
STD
                print TEM $str;
            $cate++;
        }

        my $legtxt = join(",",@ts);
        #print "$legtxt\n";
        print TEM "\nlegend(\"topleft\",c($legtxt),pch=16, col=c(palette()[1:$cate]),title=\"Sample Group\")\ndev.off()";

        close TEM;
        `R CMD BATCH --args $Rout`;
        %direct = ();
        $i++;
    }#while
}#box_rarefaction

sub alpha_indices{
##this funciotn is used to generate the alpha diversity
##indices table you must make sure that mothur be installed

}#alpha_indices

sub rank_abundance{
##This function generate rank abundance curve for the data
##input 1 parameters
##The unique.name file from TSC results
    my @tm = @_;
    `cut -f 2 $tm[0] | sort -r -n  > rank.list`;
    my $tempr = "$tm[0].rank.abundant.R";
    die "$! \n" unless open(T, ">$tempr");
    print T <<STD;
#This is the R script for rank abundant curves
myvector <- read.table(file="rank.list")
len <- dim(myvector)[1]
x <- 1:len
y <- as.vector(myvector[,1])
pdf("$tm[0].rank.abundance.pdf")
plot(x,log10(y),type="l", main="Rank abundance curve", xlab="Rank number", ylab="Relative abundance of unique tags (Log10)")
dev.off()
STD
close T;
`R CMD BATCH --args $tempr`;
}#rank_abundance

sub anova_posthoc{
    ##This function do anova analysis for different alpha diversity index
    ##and posthoc test for all the parameters
    ##1. The summary file contain all the index parameters 
    ##2. the groups file
    
    #add the groups information into summary file
    my @ar = @_;
    die "groups file wrong $! \n " unless open(I,"$ar[1]");
    my %temh;
    <I>;
    while(<I>)
    {
      chomp;
      my @tm = split(/\s+/, $_); 
      $temh{$tm[0]} = $tm[1];
    }
    close I;

    die "$!\n" unless open(II,"$ar[0]");
    my $head = <II>; chomp($head);
    $head = join("\t", $head,"group");
    my $of = "$ar[0].forR";
    die "$!\n" unless open(T,">$of");
    print T "$head\n";
    while(<II>)
    {
        chomp;
        my @tem = split(/\s+/, $_);
        if(exists $temh{$tem[0]}){
            my $o = join("\t", $_, $temh{$tem[0]});
            print T "$o\n";
        }else
        {
            die "wrong groups file $! \n";    
        }
    }
    close II;
###Rscript for anova and posthoc t test
    my $or = "$of.R";
    die "$! \n" unless open(TT, ">$or");
print  TT <<STD;
indext <- read.table(file="$of", header=TRUE);
attach(indext)
#for otu
library(car)
library(multcomp)
ginfo <- indext\$group

######Parametic test
#normally test qqplot
par(mfrow=c(2,2))
pdf("$of.R.qqplot.pdf")
qqPlot(lm(sobs ~ ginfo), simulate=TRUE, main="Q-Q Plot 95% confidence envelope OTU(97%) number", labels=FALSE)
qqPlot(lm(chao ~ ginfo), simulate=TRUE, main="Q-Q Plot 95% confidence envelope Chao index", labels=FALSE)
qqPlot(lm(ace ~ ginfo), simulate=TRUE, main="Q-Q Plot 95% confidence envelope Ace index", labels=FALSE)
qqPlot(lm(shannon ~ ginfo), simulate=TRUE, main="Q-Q Plot 95% confidence envelope Shannon index", labels=FALSE)
dev.off()
## Equality of variance
##Bartlett test
a1bartlett <- bartlett.test(sobs,ginfo)
a1levene <- leveneTest(sobs, ginfo)
a1 <- aov(sobs ~ ginfo)
otui <- TukeyHSD(a1)

#for chao
a2bartlett <- bartlett.test(chao,ginfo)
a2levene <- leveneTest(chao, ginfo)
a2 <- aov(chao ~ ginfo)
chaoi <- TukeyHSD(a2)

#for ace
a3bartlett <- bartlett.test(ace,ginfo)
a3levene <- leveneTest(ace, ginfo)
a3 <- aov(ace ~ ginfo)
acei <- TukeyHSD(a3)

#for shannon
a4bartlett <- bartlett.test(shannon,ginfo)
a4levene <- leveneTest(ace, ginfo)
a4 <- aov(shannon ~ ginfo)
shannoni <- TukeyHSD(a4)

pdf("$of.Tukey_HSD.test.otu.pdf")
#par(mar=c(5,4,6,2))
tes <- glht(a1, linfct=mcp(ginfo="Tukey"))
plot(cld(tes, level=.05), col="yellow")
dev.off()

pdf("$of.Tukey_HSD.test.chao.pdf")
#par(mar=c(5,4,6,2))
tes <- glht(a2, linfct=mcp(ginfo="Tukey"))
plot(cld(tes, level=.05), col="yellow")
dev.off()

pdf("$of.Tukey_HSD.test.ace.pdf")
#par(mar=c(5,4,6,2))
tes <- glht(a3, linfct=mcp(ginfo="Tukey"))
plot(cld(tes, level=.05), col="yellow")
dev.off()

pdf("$of.Tukey_HSD.test.shannon.pdf")
#par(mar=c(5,4,6,2))
tes <- glht(a4, linfct=mcp(ginfo="Tukey"))
plot(cld(tes, level=.05), col="yellow")
dev.off()

##Following statistic data
a1bartlett

a1levene 

summary(a1)

otui

a2bartlett

a2levene

summary(a2)

chaoi

a3bartlett

a3levene

summary(a3)

acei

a4bartlett

a4levene

summary(a4)

shannoni
##End
STD
 `R CMD BATCH --args $or`;

}#anova_posho


##the following generate rarefaction curve using mothur
sub tsc_mothurbatch{
   #1. the nochimera fasta list file
   #2. the output dir
   #3. TSC excution file

    my @ar = @_;
    my $ex = $ar[2];
    unless(-d $ar[1])
    {
        `mkdir $ar[1]`;
    }

    unless(-d "$ar[1]/tsc")
    {
        `mkdir $ar[1]/tsc`;
    }

    die "The input $ar[0] does not exists $! \n" unless open(I,"$ar[0]");
    my $tscbash = "$ar[1]/tsc.sh";
    die "$tscbash $! \n" unless open(T,">$tscbash");
    my $mothursh = "$ar[1]/mothur.sh";
    die "mothur sh $! \n"  unless open(TTT,">$mothursh");
    while(<I>)
    {
        chomp;
        my @tm = split(/\//,$_);
        print T "$ex -i $_ -o  /tsc/$tm[-1].tsc -n 8 -m al\n";
        `$ex -i $_ -o  $ar[1]/tsc/$tm[-1].tsc -n 8 -m al`;
        my $tfa = "$ar[1]/tsc/$tm[-1].tsc.unique.fa";
        my $tna = "$ar[1]/tsc/$tm[-1].tsc.unique.name";
        my $totu = "$ar[1]/tsc/$tm[-1].tsc_0.03_otu.al.list";
        my $omf = "$ar[1]/tsc/$tm[-1].mothurotu.list";
        ##transformat tsc result into mothur otu format
        tran_tsc2mothur($totu, $tna, $tfa, $omf);     
        ##running mothur
        print TTT "mothur \"#rarefaction.single(list=$omf,freq=500);summary.single()\";\n";
        `mothur "#rarefaction.single(list=$omf,freq=500);summary.single()"`; 
       # print "here\n";
    }#while
    close I;    
}#tsc_mothurbatch

sub generate_raretable{
    ##this function merge all the rarefaction results into one table for rarefaction plot
    #1. the rarefaction list file
    #2. the rare table 
    my @ar = @_;
    die "$ar[0] $!\n" unless open(I,"$ar[0]");
    my $tem = "rare.temp";
    die "$tem $!\n" unless open(TEM,">$tem");
    while(<I>)
    {
        chomp;
        die "$_ $!\n" unless open(TEMP, "$_");
        my $nam  = (split(/\./,(split(/\//,$_))[-1]))[0];
        print TEM "$nam";
        <TEMP>;
        while(<TEMP>)
        {
            my @tm = split /\s+/;
            print TEM "\t$tm[1]";
        }
        close TEMP;
        print TEM "\n";
    }
    close I; 
    my $di = `pwd`; chomp($di);
    $tem = "$di/$tem";
    transpose_matrix($tem,$ar[1],500);
    #generate
    #print "$ar[1]\n";
    unlink $tem;

}#generate_raretable

sub generate_alphaindex{
##This function is written for generation of the summary file for following ANOVA anlysis and test
#1. the summary list file
#2. the output summary file 1
#3. the selected ACE CHAO  SHANNON and SOBS table for mothur

    my @ar = @_;
    die "$ar[0] $! \n" unless open(IN, "$ar[0]");
    die "$ar[1] $! \n" unless open(TN, ">$ar[1]");
    die "$ar[2] $! \n" unless open(TTN, ">$ar[2]");

    my $h = "label\tsobs\tchao\tchao_lci\tchao_hci\tace\tace_lci\tace_hci\tjackknife\tjackknife_lci\tjackknife_hci shannon\tshannon_lci\tshannon_hci\tnpshannon\tsimpson\tsimpson_lci\tsimpson_hci\n";
    print TN "$h";
    my $h2 = "label\t#ofotus\tchao(lci:hci)\tace(lci:hci)\tshannon(lci:hci)\n";
    print TTN "$h2";
    while(<IN>)
    {
        chomp;
        die "$! \n" unless open(TEMP,"$_");
        #$h = <TEMP>;
        my $idn = (split(/\./, (split(/\//,$_))[-1]))[0];
        while(<TEMP>)
        {
            if(/^0\.03/){
                chomp;
                my @tm = split(/\s+/,$_);
                shift @tm;
                my $chao = "$tm[1]($tm[2]:$tm[3])";
                my $ace = "$tm[4]($tm[5]:$tm[6])";
                my $shannon = "$tm[10]($tm[11]:$tm[12])";
                my $o2 = join("\t",$idn, $tm[0], $chao, $ace, $shannon);
                print TTN "$o2\n";
                my $o = join("\t", $idn, @tm);
                print TN "$o\n";
            }
        }
        close TEMP;
    }
    close IN;
    close TN;
    close TTN;
}#generate_alphaindex

sub transpose_matrix{
##This programe can transpose a matrix and add a index column for the transposed matrix with the head index, 
##The first row for the index is 1
##The second and following value of the index is mutiplyed by insert step
##The programe orignially written for the rarefaction analysis
##Written by jiangxiaotao 13/12/2011

#    die "perl $0 <in.matrix>  <out.matrix> <insert.step>\n" unless(@ARGV==3);
    my @ar = @_;
    die "$! \n" unless open(TM,">$ar[1]");

    my @array = ();
    my ($row,$col,$index) = (-1,0,0);

    die "Matrix not exists\n" unless open(IO,$ar[0]);
    #print "$ar[0]\n";
    while(<IO>)
    {
        chomp;
        my @tem =  split /\s+/;
        if($#tem >= $col)
        {
            $col = $#tem;
        }
        $row++;
    #    print "$row\n";
    }
    close IO;
    #print "$row\n";
#print "$row\t$col\n";

    die "Matrix not exists\n" unless open(IM,"$ar[0]");
    while(<IM>)
    {
        chomp;
        my @tem = split /\s+/;

        for(my $i = 0; $i <= $#tem; $i++ )
        {
            $array[$i][$index] = $tem[$i];
        }

        for(my $i = ($#tem + 1); $i <= $col; $i++)
        {
            $array[$i][$index] = "";
        }

        $index++;
    }
    close IM;

##output the transposed matrix
    my $step = $ar[2];

    for (my $i = 0; $i <= $col; $i++)
    {
        if($i != 0 && $i != 1)
        {
            print TM ($i-1)*$step;
        }

        if($i == 1){
            print TM "1";
        }

        if($i == 0)
        {
            print TM "index";
        }

        for (my $j = 0; $j <= $row; $j++)
        {
            print TM  "\t$array[$i][$j]";
        }
        print TM  "\n";
    }
#    print "$step\n";
}#transpose_matrix

sub rare_normalized{
##Input is the original nochimera fasta file list
##1. the nochimera file list
##2. output dir
##3. normalized number the tags should be selected randomly
    my @ar = @_;
    die "$!\n" unless open(I,"$ar[0]");    
    unless (-d $ar[1])
    {
        `mkdir $ar[1]`;
    }
    while(<I>)
    {
        chomp;
        die "not a fasta file $!\n" unless (-e $_);
        
        my $na = (split(/\//,$_))[-2];
        my $pwd = `pwd`; chomp($pwd);
        my $o = "$pwd/$ar[1]/$na/$na.normalized.nochimera.fa"; 
        unless(-d "$ar[1]/$na")
        {
            
            `mkdir $ar[1]/$na`;
        }
        my $in = "$pwd/$_";
        random_select($_, $o, $ar[2]);
    }
    close I;

}#rare_normalized

sub random_select{
##Random select reads 
#1. fastainput 
#2. fastaoutput
#3. selected number

my @ar = @_;
my $total = `grep ">" $ar[0] -c`;
chomp($total);
#print "$total\n";
my @all;
for (my $i = 0; $i < $total; $i++){
    $all[$i] = $i;
}

my %select;

my $cou=0;
while($cou < $ar[2])
{
    my $ind = rand @all;
    my $ra = $all[$ind];
    $select{$ra} = 1;
    $cou++;
    
    #remove $ra from @all
    for (my $i = $ind; $i < $#all; $i++){  
        $all[$i] = $all[$i+1]
    }
    pop @all;
}#while

die "$! \n" unless open(II,"$ar[0]");
die "$! \n" unless open(TT,">$ar[1]");
my $s = 0;
#print "$ar[0]\n";
while(my $n = <II>)
{
   my $seq = <II>;
    if(exists $select{$s}){
        print TT "$n$seq";
        delete($select{$s});
    }
    $s++;
}
close II;
close TT;

}#random_select
1;
__END__
