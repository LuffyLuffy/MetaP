package SixteenS::Statistics::ReadsSummary;
use strict;

require Exporter;
our @ISA = qw(Exporter);
our @EXPORT = qw(get_seqsummary);
##This pm is mainly to statistic the nubmer of reads generated by sequencing 
##and the number of tags after quality contrl steps such as BIPES and UCHIME
##

sub falist_readsnumber{
    ##This is only two arguments 
    ##The first is a file contain the list of all the target files, and
    ##the second is the output hash contain all the numbers
    my @tem = @_;
    
    die "Can not open $tem[0] or $tem[0] does not exist $!\n" unless(-e $tem[0]) && open(I, "$tem[0]");
    while(<I>)
    {
        my $num = `grep ">" $_ -c`;
        my @te = split(/\//,$_);
        chomp($num);
        $tem[1]{$te[-2]} = $num;
    }
    close I;
}#raw_readsnumber

sub get_seqsummary{

#1. 1.fq
#2. 2.fq
#3. primer.info.xls
#4. QC fa .list 
#5. nochimera.fa list
#6. output prefix

my @ar = @_;
open III,"$ar[2]" || die "can not open III:$!";
open IV,"$ar[3]" || die "can not open IV:$!";
open V,"$ar[4]" || die "can not open V:$!";

<III>;
$ar[2] =~ s/.xls//;
unless (-d $ar[2]){
    `mkdir $ar[2]`;
}
my %fqnum;
my %spna;
my %bar;
while(<III>)
{
    chomp;
    my @temp = split/\s+/;
    my $fbar = substr $temp[2],0,8;
    my $rbar = substr $temp[4],0,5;
    $rbar =~ tr/atgc/ATGC/;
    $bar{$temp[-1]}{f}=$fbar;
    $bar{$temp[-1]}{r}=$rbar;
##print "$fbar\n$rbar\n";die;
    open I,"$ar[0]" || die "can not open I:$!";
    open II,"$ar[1]" || die "can not open II:$!";
    unless(-d "$ar[2]/$temp[-1]"){
        `mkdir $ar[2]/$temp[-1]`;
    }
    my $fq1 = "$ar[2]\/$temp[-1]\/$temp[-1].1.fq";
    my $fq2 = "$ar[2]\/$temp[-1]\/$temp[-1].2.fq";
    open FQ1,">$fq1" || die "can not open FQ1:$!";
    open FQ2,">$fq2" || die "can not open FQ2:$!";
    my $num = 0;
    while(<I>)
    {
        my $na1 = $_;
        my $seq1 = <I>;
        my $fpos1 = index $seq1,$fbar;
        my $rpos1 = index $seq1,$rbar;
        my $na2 = <II>;
        my $seq2 = <II>;
        my $fpos2 = index $seq2,$fbar;
        my $rpos2 = index $seq2,$rbar;
##my $link1;
##my $link2;
##my $qul1;
##my $qul2;
        if ((($fpos1 <=2 && $fpos1 >=0) && ($rpos2 <=2 && $rpos2 >=0))||(($rpos1 <=2 && $rpos1 >=0)&&($fpos2 <=2 && $fpos2 >=0)))
        {
            my $link1 = <I>;
##print "$link1";die;
            my $link2 = <II>;
            my $qul1 = <I>;
            my $qul2 = <II>;  
            $num++;

            print FQ1 "$na1$seq1$link1$qul1";
##print  "$na1\n$seq1\n$link1\n$qul1";
            print FQ2 "$na2$seq2$link2$qul2";
        }
    }
    $fqnum{$temp[-1]} = $num; 
## print "$num";die;
    $spna{$temp[-1]} = $temp[0];
}

my $out = "$ar[5]";

open OUT,">$out" || die "can not open OUT:$!";

my %tag;
while(<IV>)
{
    chomp;
    my @dir = split/\//;
    open TEMP,"$_" || die "can not open III:$!";
    my $num = 0;
    while (<TEMP>)
    {
        if(/^>/)
        {
            $num++;
        }
    }
    $tag{$dir[-2]}=$num; 
    close TEMP;
}

my %nochimera;
my %unqfa;
while(<V>)
{
    chomp;
    my @temp = split/\//;
    my $name = $_;
    open T,"$name" || die "can not open V:$!";
    unique_rank($name);
    $name =~ s/\.fa$//;
    my $unqfa = "$name.ranked.unique.fa";
    my $num = 0;
    while (<T>)
    {
        if(/^>/)
        {
            $num++;
        }
    }
    $nochimera{$temp[-2]}=$num;

    my $a = 0;
    open UQ,"$unqfa" || die "can not open UQ:$!";
    while(<UQ>)
    {
        if (/^>/)
        {
            $a++;
        }
    }
    close UQ;
    $unqfa{$temp[-2]} = $a;
}

print OUT "SampleID\tforward_barcode\treverse_barcode\tRaw_seqnum\tQC_tag\tNochimera_seqnum\tunique\texperiment_samplename\n";
for my $i(sort keys %tag)
{
    print OUT "$i\t$bar{$i}{f}\t$bar{$i}{r}\t$fqnum{$i}\t$tag{$i}\t$nochimera{$i}\t$unqfa{$i}\t$spna{$i}\n";
}

}##get_seqsummary

sub unique_rank{
    ##input is the fasta file
    ##output is the ranked uniqe file
    
    my @arm = @_;
    die "$arm[0] \t $! \n" unless open(I,"$arm[0]");
    $arm[0] =~ s/\.fa$//;
    my $of = "$arm[0].ranked.unique.fa";
    my %fa;
    my %na;
    while(<I>)
    {
       chomp;
       my @ts = split(/\s+/,$_);
       my $seq = <I>;
       $fa{$seq} ++;
       $na{$seq} = $ts[0];
    }
    close I;

    die "$! \n" unless open(TT,">$of");
    for my $k (sort {$fa{$b} <=> $fa{$a}} keys %fa )
    {
        if(exists $na{$k})
        {
           print TT "$na{$k}\n$k"; 
        }
    }
    close TT;
}#rank_seq

1;
__END__
