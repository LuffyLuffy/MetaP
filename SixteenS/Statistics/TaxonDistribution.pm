package SixteenS::Statistics::TaxonDistribution;
use strict;
require Exporter;
our @ISA = qw(Exporter);
our @EXPORT = qw(substract_sprank barchart_taxon);

use SixteenS::Tools::Matrix;

sub substract_sprank{
    
    ##Fetch rank info of taxon
    #1. the otu total table
    #2. rank from 1-7
    #3. otuput table
    my @ar = @_;
    die "$! \n" unless open(I,"$ar[0]");
    die "$! \n" unless open(TR, ">$ar[2]");
    my $r = $ar[1];
    my $head = <I>; chomp($head);
    my @tm = split(/\t/,$head);
    ##remove blank and other nam
    my @tem;   
    for(my $i = 15 ; $i <= $#tm ; $i++)
    {
        push @tem, $tm[$i];
    }
    $head = join("\t", "", @tem);
    print TR "$head\n";
    my %totalofeach;
    my %totalofsel;
    my %record;
    while(<I>)
    {   

        if(/^1/)
        {
            chomp;
            my @ts = split /\t/;
            for(my $i = 15; $i <= $#ts; $i++)
            {
                $totalofeach{$i} += $ts[$i];

            }
        }

        if(/^$r/)
        {
            chomp;
            my @line  = split(/\t/,$_);
            my $na = $line[$r];
            for(my $i = 15; $i<= $#line; $i++)
            {
                $totalofsel{$i} += $line[$i];
            }

            for(my $i = 0; $i < 15; $i++)
            {
                shift @line;
            }
            my $o = join("\t", $na, @line);
            ##notice if there have same genus name then merge them
            if(exists $record{$na})
            {
                my @ttm = split(/\t/, $record{$na});
                die "wrong $!\n" unless($#line == ($#ttm-1));
                shift @ttm;
                for (my $i=0; $i<= $#ttm; $i++)
                {
                    $ttm[$i] += $line[$i];
                }
                $o = join("\t", $na, @ttm);
                $record{$na} = $o;
            }
            else{
                $record{$na} = $o;    
            }
            #print TR "$o\n";
        }#if

    }
    close I;
    for my $k (sort keys %record)
    {
        print TR "$record{$k}\n";
    }
    %record=();
    ##generate the last Unknown assignment
    my @unk;
    for my $k (sort {$a <=> $b} keys %totalofeach)
    {
        if(exists $totalofsel{$k})
        {
            my $num = $totalofeach{$k} - $totalofsel{$k};
            push @unk, $num;
        }
    }

    my $ounk = join("\t", @unk);
    print TR "Unknown\t$ounk\n";
    close TR;
    
    #normalized the matrix to 1
    normalized($ar[2]); 
}#substract_sprank

sub barchart_taxon{
    ##this function is mainly for generation of the barchart plot 
    ##for the taxonomy distribution
    #1. the normalized phylum or genus distribution table generated by  sustract_sprank
    #2. barchar the rank domain phylum class order family genus species
    my @ar = @_;
    my $or = "$ar[0].R";
    die "$! \n" unless open(TS, ">$or");
    print TS <<STD;
##read the taxon table
mytable <- read.table(file="$ar[0]", header=TRUE, row.names=1)
#install.packages(pkgs="PerformanceAnalytics")
library(PerformanceAnalytics)
pdf("$ar[0].barchart.$ar[1].pdf")
tm <- t(mytable)
chart.StackedBar(tm, date.format="%Y", cex.legend = 0.7, colorset=rainbow12equal,main="Barchart of $ar[1]", ylab="Percent of Total", xlab="Sample ID", unstack=FALSE)
dev.off()
STD

`R CMD BATCH $or`;

}#taxon_distribution


1;
__END__
